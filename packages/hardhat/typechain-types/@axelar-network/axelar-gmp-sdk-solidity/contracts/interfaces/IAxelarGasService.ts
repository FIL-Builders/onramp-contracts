/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface IAxelarGasServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addExpressGas"
      | "addGas"
      | "addNativeExpressGas"
      | "addNativeGas"
      | "collectFees"
      | "gasCollector"
      | "payGasForContractCall"
      | "payGasForContractCallWithToken"
      | "payGasForExpressCallWithToken"
      | "payNativeGasForContractCall"
      | "payNativeGasForContractCallWithToken"
      | "payNativeGasForExpressCallWithToken"
      | "refund"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExpressGasAdded"
      | "GasAdded"
      | "GasPaidForContractCall"
      | "GasPaidForContractCallWithToken"
      | "GasPaidForExpressCallWithToken"
      | "NativeExpressGasAdded"
      | "NativeGasAdded"
      | "NativeGasPaidForContractCall"
      | "NativeGasPaidForContractCallWithToken"
      | "NativeGasPaidForExpressCallWithToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addExpressGas",
    values: [BytesLike, BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addGas",
    values: [BytesLike, BigNumberish, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addNativeExpressGas",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addNativeGas",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "gasCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payGasForContractCall",
    values: [
      AddressLike,
      string,
      string,
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payGasForContractCallWithToken",
    values: [
      AddressLike,
      string,
      string,
      BytesLike,
      string,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payGasForExpressCallWithToken",
    values: [
      AddressLike,
      string,
      string,
      BytesLike,
      string,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payNativeGasForContractCall",
    values: [AddressLike, string, string, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payNativeGasForContractCallWithToken",
    values: [
      AddressLike,
      string,
      string,
      BytesLike,
      string,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payNativeGasForExpressCallWithToken",
    values: [
      AddressLike,
      string,
      string,
      BytesLike,
      string,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addExpressGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNativeExpressGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNativeGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payGasForContractCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payGasForContractCallWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payGasForExpressCallWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payNativeGasForContractCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payNativeGasForContractCallWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payNativeGasForExpressCallWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
}

export namespace ExpressGasAddedEvent {
  export type InputTuple = [
    txHash: BytesLike,
    logIndex: BigNumberish,
    gasToken: AddressLike,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    txHash: string,
    logIndex: bigint,
    gasToken: string,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    txHash: string;
    logIndex: bigint;
    gasToken: string;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasAddedEvent {
  export type InputTuple = [
    txHash: BytesLike,
    logIndex: BigNumberish,
    gasToken: AddressLike,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    txHash: string,
    logIndex: bigint,
    gasToken: string,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    txHash: string;
    logIndex: bigint;
    gasToken: string;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasPaidForContractCallEvent {
  export type InputTuple = [
    sourceAddress: AddressLike,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: BytesLike,
    gasToken: AddressLike,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    sourceAddress: string,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: string,
    gasToken: string,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    sourceAddress: string;
    destinationChain: string;
    destinationAddress: string;
    payloadHash: string;
    gasToken: string;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasPaidForContractCallWithTokenEvent {
  export type InputTuple = [
    sourceAddress: AddressLike,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: BytesLike,
    symbol: string,
    amount: BigNumberish,
    gasToken: AddressLike,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    sourceAddress: string,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: string,
    symbol: string,
    amount: bigint,
    gasToken: string,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    sourceAddress: string;
    destinationChain: string;
    destinationAddress: string;
    payloadHash: string;
    symbol: string;
    amount: bigint;
    gasToken: string;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasPaidForExpressCallWithTokenEvent {
  export type InputTuple = [
    sourceAddress: AddressLike,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: BytesLike,
    symbol: string,
    amount: BigNumberish,
    gasToken: AddressLike,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    sourceAddress: string,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: string,
    symbol: string,
    amount: bigint,
    gasToken: string,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    sourceAddress: string;
    destinationChain: string;
    destinationAddress: string;
    payloadHash: string;
    symbol: string;
    amount: bigint;
    gasToken: string;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeExpressGasAddedEvent {
  export type InputTuple = [
    txHash: BytesLike,
    logIndex: BigNumberish,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    txHash: string,
    logIndex: bigint,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    txHash: string;
    logIndex: bigint;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeGasAddedEvent {
  export type InputTuple = [
    txHash: BytesLike,
    logIndex: BigNumberish,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    txHash: string,
    logIndex: bigint,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    txHash: string;
    logIndex: bigint;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeGasPaidForContractCallEvent {
  export type InputTuple = [
    sourceAddress: AddressLike,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: BytesLike,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    sourceAddress: string,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: string,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    sourceAddress: string;
    destinationChain: string;
    destinationAddress: string;
    payloadHash: string;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeGasPaidForContractCallWithTokenEvent {
  export type InputTuple = [
    sourceAddress: AddressLike,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: BytesLike,
    symbol: string,
    amount: BigNumberish,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    sourceAddress: string,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: string,
    symbol: string,
    amount: bigint,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    sourceAddress: string;
    destinationChain: string;
    destinationAddress: string;
    payloadHash: string;
    symbol: string;
    amount: bigint;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeGasPaidForExpressCallWithTokenEvent {
  export type InputTuple = [
    sourceAddress: AddressLike,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: BytesLike,
    symbol: string,
    amount: BigNumberish,
    gasFeeAmount: BigNumberish,
    refundAddress: AddressLike
  ];
  export type OutputTuple = [
    sourceAddress: string,
    destinationChain: string,
    destinationAddress: string,
    payloadHash: string,
    symbol: string,
    amount: bigint,
    gasFeeAmount: bigint,
    refundAddress: string
  ];
  export interface OutputObject {
    sourceAddress: string;
    destinationChain: string;
    destinationAddress: string;
    payloadHash: string;
    symbol: string;
    amount: bigint;
    gasFeeAmount: bigint;
    refundAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAxelarGasService extends BaseContract {
  connect(runner?: ContractRunner | null): IAxelarGasService;
  waitForDeployment(): Promise<this>;

  interface: IAxelarGasServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addExpressGas: TypedContractMethod<
    [
      txHash: BytesLike,
      txIndex: BigNumberish,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  addGas: TypedContractMethod<
    [
      txHash: BytesLike,
      txIndex: BigNumberish,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  addNativeExpressGas: TypedContractMethod<
    [txHash: BytesLike, logIndex: BigNumberish, refundAddress: AddressLike],
    [void],
    "payable"
  >;

  addNativeGas: TypedContractMethod<
    [txHash: BytesLike, logIndex: BigNumberish, refundAddress: AddressLike],
    [void],
    "payable"
  >;

  collectFees: TypedContractMethod<
    [receiver: AddressLike, tokens: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  gasCollector: TypedContractMethod<[], [string], "nonpayable">;

  payGasForContractCall: TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  payGasForContractCallWithToken: TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      symbol: string,
      amount: BigNumberish,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  payGasForExpressCallWithToken: TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      symbol: string,
      amount: BigNumberish,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  payNativeGasForContractCall: TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  payNativeGasForContractCallWithToken: TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      symbol: string,
      amount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  payNativeGasForExpressCallWithToken: TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      symbol: string,
      amount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;

  refund: TypedContractMethod<
    [receiver: AddressLike, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addExpressGas"
  ): TypedContractMethod<
    [
      txHash: BytesLike,
      txIndex: BigNumberish,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addGas"
  ): TypedContractMethod<
    [
      txHash: BytesLike,
      txIndex: BigNumberish,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addNativeExpressGas"
  ): TypedContractMethod<
    [txHash: BytesLike, logIndex: BigNumberish, refundAddress: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addNativeGas"
  ): TypedContractMethod<
    [txHash: BytesLike, logIndex: BigNumberish, refundAddress: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<
    [receiver: AddressLike, tokens: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gasCollector"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "payGasForContractCall"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payGasForContractCallWithToken"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      symbol: string,
      amount: BigNumberish,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payGasForExpressCallWithToken"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      symbol: string,
      amount: BigNumberish,
      gasToken: AddressLike,
      gasFeeAmount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payNativeGasForContractCall"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "payNativeGasForContractCallWithToken"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      symbol: string,
      amount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "payNativeGasForExpressCallWithToken"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      destinationChain: string,
      destinationAddress: string,
      payload: BytesLike,
      symbol: string,
      amount: BigNumberish,
      refundAddress: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<
    [receiver: AddressLike, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ExpressGasAdded"
  ): TypedContractEvent<
    ExpressGasAddedEvent.InputTuple,
    ExpressGasAddedEvent.OutputTuple,
    ExpressGasAddedEvent.OutputObject
  >;
  getEvent(
    key: "GasAdded"
  ): TypedContractEvent<
    GasAddedEvent.InputTuple,
    GasAddedEvent.OutputTuple,
    GasAddedEvent.OutputObject
  >;
  getEvent(
    key: "GasPaidForContractCall"
  ): TypedContractEvent<
    GasPaidForContractCallEvent.InputTuple,
    GasPaidForContractCallEvent.OutputTuple,
    GasPaidForContractCallEvent.OutputObject
  >;
  getEvent(
    key: "GasPaidForContractCallWithToken"
  ): TypedContractEvent<
    GasPaidForContractCallWithTokenEvent.InputTuple,
    GasPaidForContractCallWithTokenEvent.OutputTuple,
    GasPaidForContractCallWithTokenEvent.OutputObject
  >;
  getEvent(
    key: "GasPaidForExpressCallWithToken"
  ): TypedContractEvent<
    GasPaidForExpressCallWithTokenEvent.InputTuple,
    GasPaidForExpressCallWithTokenEvent.OutputTuple,
    GasPaidForExpressCallWithTokenEvent.OutputObject
  >;
  getEvent(
    key: "NativeExpressGasAdded"
  ): TypedContractEvent<
    NativeExpressGasAddedEvent.InputTuple,
    NativeExpressGasAddedEvent.OutputTuple,
    NativeExpressGasAddedEvent.OutputObject
  >;
  getEvent(
    key: "NativeGasAdded"
  ): TypedContractEvent<
    NativeGasAddedEvent.InputTuple,
    NativeGasAddedEvent.OutputTuple,
    NativeGasAddedEvent.OutputObject
  >;
  getEvent(
    key: "NativeGasPaidForContractCall"
  ): TypedContractEvent<
    NativeGasPaidForContractCallEvent.InputTuple,
    NativeGasPaidForContractCallEvent.OutputTuple,
    NativeGasPaidForContractCallEvent.OutputObject
  >;
  getEvent(
    key: "NativeGasPaidForContractCallWithToken"
  ): TypedContractEvent<
    NativeGasPaidForContractCallWithTokenEvent.InputTuple,
    NativeGasPaidForContractCallWithTokenEvent.OutputTuple,
    NativeGasPaidForContractCallWithTokenEvent.OutputObject
  >;
  getEvent(
    key: "NativeGasPaidForExpressCallWithToken"
  ): TypedContractEvent<
    NativeGasPaidForExpressCallWithTokenEvent.InputTuple,
    NativeGasPaidForExpressCallWithTokenEvent.OutputTuple,
    NativeGasPaidForExpressCallWithTokenEvent.OutputObject
  >;

  filters: {
    "ExpressGasAdded(bytes32,uint256,address,uint256,address)": TypedContractEvent<
      ExpressGasAddedEvent.InputTuple,
      ExpressGasAddedEvent.OutputTuple,
      ExpressGasAddedEvent.OutputObject
    >;
    ExpressGasAdded: TypedContractEvent<
      ExpressGasAddedEvent.InputTuple,
      ExpressGasAddedEvent.OutputTuple,
      ExpressGasAddedEvent.OutputObject
    >;

    "GasAdded(bytes32,uint256,address,uint256,address)": TypedContractEvent<
      GasAddedEvent.InputTuple,
      GasAddedEvent.OutputTuple,
      GasAddedEvent.OutputObject
    >;
    GasAdded: TypedContractEvent<
      GasAddedEvent.InputTuple,
      GasAddedEvent.OutputTuple,
      GasAddedEvent.OutputObject
    >;

    "GasPaidForContractCall(address,string,string,bytes32,address,uint256,address)": TypedContractEvent<
      GasPaidForContractCallEvent.InputTuple,
      GasPaidForContractCallEvent.OutputTuple,
      GasPaidForContractCallEvent.OutputObject
    >;
    GasPaidForContractCall: TypedContractEvent<
      GasPaidForContractCallEvent.InputTuple,
      GasPaidForContractCallEvent.OutputTuple,
      GasPaidForContractCallEvent.OutputObject
    >;

    "GasPaidForContractCallWithToken(address,string,string,bytes32,string,uint256,address,uint256,address)": TypedContractEvent<
      GasPaidForContractCallWithTokenEvent.InputTuple,
      GasPaidForContractCallWithTokenEvent.OutputTuple,
      GasPaidForContractCallWithTokenEvent.OutputObject
    >;
    GasPaidForContractCallWithToken: TypedContractEvent<
      GasPaidForContractCallWithTokenEvent.InputTuple,
      GasPaidForContractCallWithTokenEvent.OutputTuple,
      GasPaidForContractCallWithTokenEvent.OutputObject
    >;

    "GasPaidForExpressCallWithToken(address,string,string,bytes32,string,uint256,address,uint256,address)": TypedContractEvent<
      GasPaidForExpressCallWithTokenEvent.InputTuple,
      GasPaidForExpressCallWithTokenEvent.OutputTuple,
      GasPaidForExpressCallWithTokenEvent.OutputObject
    >;
    GasPaidForExpressCallWithToken: TypedContractEvent<
      GasPaidForExpressCallWithTokenEvent.InputTuple,
      GasPaidForExpressCallWithTokenEvent.OutputTuple,
      GasPaidForExpressCallWithTokenEvent.OutputObject
    >;

    "NativeExpressGasAdded(bytes32,uint256,uint256,address)": TypedContractEvent<
      NativeExpressGasAddedEvent.InputTuple,
      NativeExpressGasAddedEvent.OutputTuple,
      NativeExpressGasAddedEvent.OutputObject
    >;
    NativeExpressGasAdded: TypedContractEvent<
      NativeExpressGasAddedEvent.InputTuple,
      NativeExpressGasAddedEvent.OutputTuple,
      NativeExpressGasAddedEvent.OutputObject
    >;

    "NativeGasAdded(bytes32,uint256,uint256,address)": TypedContractEvent<
      NativeGasAddedEvent.InputTuple,
      NativeGasAddedEvent.OutputTuple,
      NativeGasAddedEvent.OutputObject
    >;
    NativeGasAdded: TypedContractEvent<
      NativeGasAddedEvent.InputTuple,
      NativeGasAddedEvent.OutputTuple,
      NativeGasAddedEvent.OutputObject
    >;

    "NativeGasPaidForContractCall(address,string,string,bytes32,uint256,address)": TypedContractEvent<
      NativeGasPaidForContractCallEvent.InputTuple,
      NativeGasPaidForContractCallEvent.OutputTuple,
      NativeGasPaidForContractCallEvent.OutputObject
    >;
    NativeGasPaidForContractCall: TypedContractEvent<
      NativeGasPaidForContractCallEvent.InputTuple,
      NativeGasPaidForContractCallEvent.OutputTuple,
      NativeGasPaidForContractCallEvent.OutputObject
    >;

    "NativeGasPaidForContractCallWithToken(address,string,string,bytes32,string,uint256,uint256,address)": TypedContractEvent<
      NativeGasPaidForContractCallWithTokenEvent.InputTuple,
      NativeGasPaidForContractCallWithTokenEvent.OutputTuple,
      NativeGasPaidForContractCallWithTokenEvent.OutputObject
    >;
    NativeGasPaidForContractCallWithToken: TypedContractEvent<
      NativeGasPaidForContractCallWithTokenEvent.InputTuple,
      NativeGasPaidForContractCallWithTokenEvent.OutputTuple,
      NativeGasPaidForContractCallWithTokenEvent.OutputObject
    >;

    "NativeGasPaidForExpressCallWithToken(address,string,string,bytes32,string,uint256,uint256,address)": TypedContractEvent<
      NativeGasPaidForExpressCallWithTokenEvent.InputTuple,
      NativeGasPaidForExpressCallWithTokenEvent.OutputTuple,
      NativeGasPaidForExpressCallWithTokenEvent.OutputObject
    >;
    NativeGasPaidForExpressCallWithToken: TypedContractEvent<
      NativeGasPaidForExpressCallWithTokenEvent.InputTuple,
      NativeGasPaidForExpressCallWithTokenEvent.OutputTuple,
      NativeGasPaidForExpressCallWithTokenEvent.OutputObject
    >;
  };
}
